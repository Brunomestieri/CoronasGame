#BlueJ class context
comment0.target=BaseActor
comment0.text=\n\ Extends\ functionality\ of\ the\ LibGDX\ Actor\ class.\n\ by\ adding\ support\ for\ textures/animation,\ \n\ collision\ polygons,\ movement,\ world\ boundaries,\ and\ camera\ scrolling.\ \n\ Most\ game\ objects\ should\ extend\ this\ class;\ lists\ of\ extensions\ can\ be\ retrieved\ by\ stage\ and\ class\ name.\n\ @see\ \#Actor\n\ @author\ Lee\ Stemkoski\n
comment1.params=x\ y\ s
comment1.target=BaseActor(float,\ float,\ com.badlogic.gdx.scenes.scene2d.Stage)
comment10.params=
comment10.target=boolean\ isAnimationFinished()
comment10.text=\n\ \ Checks\ if\ animation\ is\ complete\:\ if\ play\ mode\ is\ normal\ (not\ looping)\n\ \ \ \ \ \ and\ elapsed\ time\ is\ greater\ than\ time\ corresponding\ to\ last\ frame.\n\ \ @return\ \n
comment11.params=opacity
comment11.target=void\ setOpacity(float)
comment11.text=\n\ \ Sets\ the\ opacity\ of\ this\ actor.\n\ \ @param\ opacity\ value\ from\ 0\ (transparent)\ to\ 1\ (opaque)\n
comment12.params=acc
comment12.target=void\ setAcceleration(float)
comment12.text=\n\ \ Set\ acceleration\ of\ this\ object.\n\ \ @param\ acc\ Acceleration\ in\ (pixels/second)\ per\ second.\n
comment13.params=dec
comment13.target=void\ setDeceleration(float)
comment13.text=\n\ \ Set\ deceleration\ of\ this\ object.\n\ \ Deceleration\ is\ only\ applied\ when\ object\ is\ not\ accelerating.\n\ \ @param\ dec\ Deceleration\ in\ (pixels/second)\ per\ second.\n
comment14.params=ms
comment14.target=void\ setMaxSpeed(float)
comment14.text=\n\ \ Set\ maximum\ speed\ of\ this\ object.\n\ \ @param\ ms\ Maximum\ speed\ of\ this\ object\ in\ (pixels/second).\n
comment15.params=speed
comment15.target=void\ setSpeed(float)
comment15.text=\n\ \ Set\ the\ speed\ of\ movement\ (in\ pixels/second)\ in\ current\ direction.\n\ \ If\ current\ speed\ is\ zero\ (direction\ is\ undefined),\ direction\ will\ be\ set\ to\ 0\ degrees.\n\ \ @param\ speed\ of\ movement\ (pixels/second)\n
comment16.params=
comment16.target=float\ getSpeed()
comment16.text=\n\ \ Calculates\ the\ speed\ of\ movement\ (in\ pixels/second).\n\ \ @return\ speed\ of\ movement\ (pixels/second)\n
comment17.params=
comment17.target=boolean\ isMoving()
comment17.text=\n\ \ Determines\ if\ this\ object\ is\ moving\ (if\ speed\ is\ greater\ than\ zero).\n\ \ @return\ false\ when\ speed\ is\ zero,\ true\ otherwise\n
comment18.params=angle
comment18.target=void\ setMotionAngle(float)
comment18.text=\n\ \ Sets\ the\ angle\ of\ motion\ (in\ degrees).\n\ \ If\ current\ speed\ is\ zero,\ this\ will\ have\ no\ effect.\n\ \ @param\ angle\ of\ motion\ (degrees)\n
comment19.params=
comment19.target=float\ getMotionAngle()
comment19.text=\n\ \ Get\ the\ angle\ of\ motion\ (in\ degrees),\ calculated\ from\ the\ velocity\ vector.\n\ \ <br>\n\ \ To\ align\ actor\ image\ angle\ with\ motion\ angle,\ use\ <code>setRotation(\ getMotionAngle()\ )</code>.\n\ \ @return\ angle\ of\ motion\ (degrees)\n
comment2.params=
comment2.target=void\ wrapAroundWorld()
comment2.text=\ \n\ \ If\ this\ object\ moves\ completely\ past\ the\ world\ bounds,\n\ \ adjust\ its\ position\ to\ the\ opposite\ side\ of\ the\ world.\n
comment20.params=angle
comment20.target=void\ accelerateAtAngle(float)
comment20.text=\n\ \ Update\ accelerate\ vector\ by\ angle\ and\ value\ stored\ in\ acceleration\ field.\n\ \ Acceleration\ is\ applied\ by\ <code>applyPhysics</code>\ method.\n\ \ @param\ angle\ Angle\ (degrees)\ in\ which\ to\ accelerate.\n\ \ @see\ \#acceleration\n\ \ @see\ \#applyPhysics\n
comment21.params=
comment21.target=void\ accelerateForward()
comment21.text=\n\ \ Update\ accelerate\ vector\ by\ current\ rotation\ angle\ and\ value\ stored\ in\ acceleration\ field.\n\ \ Acceleration\ is\ applied\ by\ <code>applyPhysics</code>\ method.\n\ \ @see\ \#acceleration\n\ \ @see\ \#applyPhysics\n
comment22.params=dt
comment22.target=void\ applyPhysics(float)
comment22.text=\n\ \ Adjust\ velocity\ vector\ based\ on\ acceleration\ vector,\ \n\ \ then\ adjust\ position\ based\ on\ velocity\ vector.\ <br>\n\ \ If\ not\ accelerating,\ deceleration\ value\ is\ applied.\ <br>\n\ \ Speed\ is\ limited\ by\ maxSpeed\ value.\ <br>\n\ \ Acceleration\ vector\ reset\ to\ (0,0)\ at\ end\ of\ method.\ <br>\n\ \ @param\ dt\ Time\ elapsed\ since\ previous\ frame\ (delta\ time);\ typically\ obtained\ from\ <code>act</code>\ method.\n\ \ @see\ \#acceleration\n\ \ @see\ \#deceleration\n\ \ @see\ \#maxSpeed\n
comment23.params=
comment23.target=void\ setBoundaryRectangle()
comment23.text=\n\ \ Set\ rectangular-shaped\ collision\ polygon.\n\ \ This\ method\ is\ automatically\ called\ when\ animation\ is\ set,\n\ \ \ provided\ that\ the\ current\ boundary\ polygon\ is\ null.\n\ \ @see\ \#setAnimation\n
comment24.params=numSides
comment24.target=void\ setBoundaryPolygon(int)
comment24.text=\n\ \ Replace\ default\ (rectangle)\ collision\ polygon\ with\ an\ n-sided\ polygon.\ <br>\n\ \ Vertices\ of\ polygon\ lie\ on\ the\ ellipse\ contained\ within\ bounding\ rectangle.\n\ \ Note\:\ one\ vertex\ will\ be\ located\ at\ point\ (0,width);\n\ \ a\ 4-sided\ polygon\ will\ appear\ in\ the\ orientation\ of\ a\ diamond.\n\ \ @param\ numSides\ number\ of\ sides\ of\ the\ collision\ polygon\n
comment25.params=
comment25.target=com.badlogic.gdx.math.Polygon\ getBoundaryPolygon()
comment25.text=\n\ \ Returns\ bounding\ polygon\ for\ this\ BaseActor,\ adjusted\ by\ Actor's\ current\ position\ and\ rotation.\n\ \ @return\ bounding\ polygon\ for\ this\ BaseActor\n
comment26.params=other
comment26.target=boolean\ overlaps(BaseActor)
comment26.text=\n\ \ Determine\ if\ this\ BaseActor\ overlaps\ other\ BaseActor\ (according\ to\ collision\ polygons).\n\ \ @param\ other\ BaseActor\ to\ check\ for\ overlap\n\ \ @return\ true\ if\ collision\ polygons\ of\ this\ and\ other\ BaseActor\ overlap\n\ \ @see\ \#setCollisionRectangle\n\ \ @see\ \#setCollisionPolygon\n
comment27.params=other
comment27.target=com.badlogic.gdx.math.Vector2\ preventOverlap(BaseActor)
comment27.text=\n\ \ Implement\ a\ "solid"-like\ behavior\:\n\ \ when\ there\ is\ overlap,\ move\ this\ BaseActor\ away\ from\ other\ BaseActor\n\ \ along\ minimum\ translation\ vector\ until\ there\ is\ no\ overlap.\n\ \ @param\ other\ BaseActor\ to\ check\ for\ overlap\n\ \ @return\ direction\ vector\ by\ which\ actor\ was\ translated,\ null\ if\ no\ overlap\n
comment28.params=width\ height
comment28.target=void\ setWorldBounds(float,\ float)
comment28.text=\n\ \ Set\ world\ dimensions\ for\ use\ by\ methods\ boundToWorld()\ and\ scrollTo().\n\ \ @param\ width\ width\ of\ world\n\ \ @param\ height\ height\ of\ world\n
comment29.params=ba
comment29.target=void\ setWorldBounds(BaseActor)
comment29.text=\n\ \ Set\ world\ dimensions\ for\ use\ by\ methods\ boundToWorld()\ and\ scrollTo().\n\ \ @param\ BaseActor\ whose\ size\ determines\ the\ world\ bounds\ (typically\ a\ background\ image)\n
comment3.params=x\ y
comment3.target=void\ centerAtPosition(float,\ float)
comment3.text=\n\ \ Align\ center\ of\ actor\ at\ given\ position\ coordinates.\n\ \ @param\ x\ x-coordinate\ to\ center\ at\n\ \ @param\ y\ y-coordinate\ to\ center\ at\n
comment30.params=
comment30.target=void\ boundToWorld()
comment30.text=\n\ If\ an\ edge\ of\ an\ object\ moves\ past\ the\ world\ bounds,\ \n\ \ \ adjust\ its\ position\ to\ keep\ it\ completely\ on\ screen.\n
comment31.params=
comment31.target=void\ alignCamera()
comment31.text=\n\ \ Center\ camera\ on\ this\ object,\ while\ keeping\ camera's\ range\ of\ view\ \n\ \ (determined\ by\ screen\ size)\ completely\ within\ world\ bounds.\n
comment32.params=stage\ className
comment32.target=java.util.ArrayList\ getList(com.badlogic.gdx.scenes.scene2d.Stage,\ java.lang.String)
comment32.text=\n\ \ Retrieves\ a\ list\ of\ all\ instances\ of\ the\ object\ from\ the\ given\ stage\ with\ the\ given\ class\ name\n\ \ \ \ \ \ or\ whose\ class\ extends\ the\ class\ with\ the\ given\ name.\n\ \ If\ no\ instances\ exist,\ returns\ an\ empty\ list.\n\ \ Useful\ when\ coding\ interactions\ between\ different\ types\ of\ game\ objects\ in\ update\ method.\n\ \ @param\ stage\ Stage\ containing\ BaseActor\ instances\n\ \ @param\ className\ name\ of\ a\ class\ that\ extends\ the\ BaseActor\ class\n\ \ @return\ list\ of\ instances\ of\ the\ object\ in\ stage\ which\ extend\ with\ the\ given\ class\ name\ \n
comment33.params=stage\ className
comment33.target=int\ count(com.badlogic.gdx.scenes.scene2d.Stage,\ java.lang.String)
comment33.text=\n\ \ Returns\ number\ of\ instances\ of\ a\ given\ class\ (that\ extends\ BaseActor).\n\ \ @param\ className\ name\ of\ a\ class\ that\ extends\ the\ BaseActor\ class\n\ \ @return\ number\ of\ instances\ of\ the\ class\n
comment34.params=dt
comment34.target=void\ act(float)
comment34.text=\n\ \ Processes\ all\ Actions\ and\ related\ code\ for\ this\ object;\ \n\ \ automatically\ called\ by\ act\ method\ in\ Stage\ class.\n\ \ @param\ dt\ elapsed\ time\ (second)\ since\ last\ frame\ (supplied\ by\ Stage\ act\ method)\n
comment35.params=batch\ parentAlpha
comment35.target=void\ draw(com.badlogic.gdx.graphics.g2d.Batch,\ float)
comment35.text=\n\ \ Draws\ current\ frame\ of\ animation;\ automatically\ called\ by\ draw\ method\ in\ Stage\ class.\ <br>\n\ \ If\ color\ has\ been\ set,\ image\ will\ be\ tinted\ by\ that\ color.\ <br>\n\ \ If\ no\ animation\ has\ been\ set\ or\ object\ is\ invisible,\ nothing\ will\ be\ drawn.\n\ \ @param\ batch\ (supplied\ by\ Stage\ draw\ method)\n\ \ @param\ parentAlpha\ (supplied\ by\ Stage\ draw\ method)\n\ \ @see\ \#setColor\n\ \ @see\ \#setVisible\n\ \ \n
comment4.params=other
comment4.target=void\ centerAtActor(BaseActor)
comment4.text=\ \n\ \ Repositions\ this\ BaseActor\ so\ its\ center\ is\ aligned\n\ \ with\ center\ of\ other\ BaseActor.\ Useful\ when\ one\ BaseActor\ spawns\ another.\n\ \ @param\ other\ BaseActor\ to\ align\ this\ BaseActor\ with\n
comment5.params=anim
comment5.target=void\ setAnimation(com.badlogic.gdx.graphics.g2d.Animation)
comment5.text=\n\ Sets\ the\ animation\ used\ when\ rendering\ this\ actor;\ also\ sets\ actor\ size.\n\ @param\ anim\ animation\ that\ will\ be\ drawn\ when\ actor\ is\ rendered\n
comment6.params=fileNames\ frameDuration\ loop
comment6.target=com.badlogic.gdx.graphics.g2d.Animation\ loadAnimationFromFiles(java.lang.String[],\ float,\ boolean)
comment6.text=\n\ Creates\ an\ animation\ from\ images\ stored\ in\ separate\ files.\n\ @param\ fileNames\ array\ of\ names\ of\ files\ containing\ animation\ images\n\ @param\ frameDuration\ how\ long\ each\ frame\ should\ be\ displayed\n\ @param\ loop\ should\ the\ animation\ loop\n\ @return\ animation\ created\ (useful\ for\ storing\ multiple\ animations)\n
comment7.params=fileName\ rows\ cols\ frameDuration\ loop
comment7.target=com.badlogic.gdx.graphics.g2d.Animation\ loadAnimationFromSheet(java.lang.String,\ int,\ int,\ float,\ boolean)
comment7.text=\n\ Creates\ an\ animation\ from\ a\ spritesheet\:\ a\ rectangular\ grid\ of\ images\ stored\ in\ a\ single\ file.\n\ @param\ fileName\ name\ of\ file\ containing\ spritesheet\n\ @param\ rows\ number\ of\ rows\ of\ images\ in\ spritesheet\n\ @param\ cols\ number\ of\ columns\ of\ images\ in\ spritesheet\n\ @param\ frameDuration\ how\ long\ each\ frame\ should\ be\ displayed\n\ @param\ loop\ should\ the\ animation\ loop\n\ @return\ animation\ created\ (useful\ for\ storing\ multiple\ animations)\n
comment8.params=fileName
comment8.target=com.badlogic.gdx.graphics.g2d.Animation\ loadTexture(java.lang.String)
comment8.text=\n\ \ Convenience\ method\ for\ creating\ a\ 1-frame\ animation\ from\ a\ single\ texture.\n\ \ @param\ fileName\ names\ of\ image\ file\n\ \ @return\ animation\ created\ (useful\ for\ storing\ multiple\ animations)\n
comment9.params=pause
comment9.target=void\ setAnimationPaused(boolean)
comment9.text=\n\ \ Set\ the\ pause\ state\ of\ the\ animation.\n\ \ @param\ pause\ true\ to\ pause\ animation,\ false\ to\ resume\ animation\n
numComments=36
